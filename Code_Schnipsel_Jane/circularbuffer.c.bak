#include <stdlib.h>
#include <stdio.h>



/**
 * Type of the elements of the circular buffer
 * If you want to use a different element type, then change this typedef
 */
typedef int cb_element_t;

/**
 * Struct representing a circular buffer
 */
typedef struct {
	cb_element_t* buffer;
	int first;  // Index des ersten Elements
	int count;  // Anzahl der Elemente im Buffer
	int size;   // GrÃ¶ÃŸe des Buffers
} circularbuffer_t;

/**
 * Initializes the circular buffer.
 *
 * \param buffer pointer to struct representing a circular buffer
 * \param size size of the circular buffer
 * \return a negative value in case of an error otherwise 0
 */
int cb_init(circularbuffer_t* buffer, int size) {
	if (size <= 0) {
		return -1;
	}
	buffer->buffer = (cb_element_t*)malloc(sizeof(cb_element_t)*size);
	if (buffer->buffer == NULL) {
		return -2;
	}
	buffer->first = 0;
	buffer->count = 0;
	buffer->size = size;
	return 0;
}

/**
 * Destroys the circular buffer and frees all ressources.
 * 
 * \param buffer pointer to struct representing the circular buffer
 * \return a negative value in case of an error otherwise 0
 */
int cb_destroy(circularbuffer_t* buffer) {
    if (buffer->buffer) {
        free(buffer->buffer);
        buffer->buffer = NULL;
        return 0;
    }
    return -1;
}

/**
 * Adds an Element to the circular buffer
 *
 * \param buffer pointer to struct representing a circular buffer
 * \param elem value to be added to the circular buffer
 * \return -1 when the buffer is full otherwise 0
 */
int cb_add(circularbuffer_t* buffer, cb_element_t elem) {
	 if (buffer->count >= buffer->size) {
		 return -1;
	 }
	 int elem_index = (buffer->first + buffer->count) % buffer->size;
	 buffer->buffer[elem_index] = elem;
	 buffer->count++;
	 return 0;
}

/**
 * Removes an Element from the circular buffer. The removed element is returned via call-by-reference.
 *
 * \param buffer pointer to struct representing a circular buffer
 * \param elem pointer to where the removed value should be stored (call-by-reference)
 * \return -1 when the buffer is empty otherwise 0
 */
int cb_remove(circularbuffer_t* buffer, cb_element_t* elem) {
	 if (buffer->count <= 0) {
		 return -1;
	 }
	 if (elem != NULL) {
		 *elem = buffer->buffer[buffer->first];
	 }
	 buffer->first = (buffer->first + 1) % buffer->size;
	 buffer->count--;
	 return 0;
}

/**
 * Returns the number of elements in the circular buffer
 *
 * \param buffer pointer to struct representing a circular buffer
 * \return number of elements in the circular buffer
 */
int cb_count(circularbuffer_t* buffer) {
	 return buffer->count;
}

/**
 * Returns whether the circular buffer is full
 *
 * \param buffer pointer to struct representing a circular buffer
 * \return boolean value indicating that the buffer is full
 */
int cb_isFull(circularbuffer_t* buffer) {
	 return buffer->count == buffer->size;
}

/**
 * Returns whether the circular buffer is empty
 *
 * \param buffer pointer to struct representing a circular buffer
 * \return boolean value indicating whether the buffer is empty
 */
int cb_isEmpty(circularbuffer_t* buffer) {
	 return buffer->count == 0;
}



int main() {

	// Creates a circular buffer with 7 elements
	circularbuffer_t myCB;
	cb_init(&myCB, 7);

	// Checks whether the buffer is empty
	printf("Circular Buffer is Empty: %d\n", cb_isEmpty(&myCB));
	printf("Circular Buffer is Full: %d\n", cb_isFull(&myCB));

	// Add values to the circular buffer
	cb_add(&myCB, 1);
	printf("Number of Elements: %d\n", cb_count(&myCB));
	cb_add(&myCB, 2);
	printf("Number of Elements: %d\n", cb_count(&myCB));
	cb_add(&myCB, 3);
	printf("Number of Elements: %d\n", cb_count(&myCB));
	cb_add(&myCB, 4);
	printf("Number of Elements: %d\n", cb_count(&myCB));
	cb_add(&myCB, 5);
	printf("Number of Elements: %d\n", cb_count(&myCB));
	cb_add(&myCB, 6);
	printf("Number of Elements: %d\n", cb_count(&myCB));
	cb_add(&myCB, 7);
	printf("Number of Elements: %d\n", cb_count(&myCB));

	// Checks whether the buffer is full
	printf("Circular Buffer is Empty: %d\n", cb_isEmpty(&myCB));
	printf("Circular Buffer is Full: %d\n", cb_isFull(&myCB));

	printf("cb_add() now returns %d\n", cb_add(&myCB, 8));

	// Removes Elements from the buffer
	printf("Elements in the circular buffer: ");
	cb_element_t element;
	while (cb_remove(&myCB, &element) == 0) {
		printf("%d ", element);
	}
	printf("\n");

	// Checks whether the buffer is empty
	printf("Circular Buffer is Empty: %d\n", cb_isEmpty(&myCB));
	printf("Circular Buffer is Full: %d\n", cb_isFull(&myCB));

	printf("cb_remove() now returns %d\n", cb_remove(&myCB, &element));
    
    // Destroys the buffer und frees all ressources
    cb_destroy(&myCB);
}